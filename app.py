import sqlite3
import os
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
import base64
from flask import Flask, render_template, request, flash, g, make_response
from FDataBase import FDataBase


DATABASE = '/tmp/flsite.db'
DEBUG = True
SECRET_KEY = 'qwerty'

app = Flask(__name__)
app.config.from_object(__name__)
app.config.update(dict(DATABASE=os.path.join(app.root_path, 'flsite.db')))

def connect_db():
    conn = sqlite3.connect(app.config['DATABASE'])
    conn.row_factory = sqlite3.Row
    return conn

def get_db():
    if not hasattr(g, 'link_db'):
        g.link_db = connect_db()
    return g.link_db

@app.teardown_appcontext
def close_db(error):
    if hasattr(g, 'link_db'):
        g.link_db.close()

def get_site_name(db, site_id):
    cur = db.cursor()
    cur.execute("SELECT name FROM sites WHERE id = ?", (site_id,))
    row = cur.fetchone()
    return row['name'] if row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–π—Ç"

@app.route('/fir', methods=["GET", "POST"])
def index():
    if request.method == "POST":
        if not request.form.get("start_date"):
            flash("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞")
        elif not request.form.get("end_date"):
            flash("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        elif not request.form.get("site"):
            flash("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç")
    return render_template('fir.html')

@app.route('/sec', methods=["POST"])
def second():
    db = get_db()
    dbase = FDataBase(db)

    site_id = request.form.get("site")
    rows_GA = dbase.getGA(site_id)
    rows_YM = dbase.getYM(site_id)
    rows_ERP = dbase.getERPProducts()

    return render_template("sec.html",
                           rows_GA=rows_GA,
                           rows_YM=rows_YM,
                           rows_ERP=rows_ERP,
                           site_id=site_id)

@app.route('/three', methods=["POST"])
def three():
    db = get_db()
    dbase = FDataBase(db)

    site_id = request.form.get("site_id")
    rows_GA = dbase.getGA(site_id)
    rows_YM = dbase.getYM(site_id)
    rows_ERP = dbase.getERPProducts()

    return render_template("three.html",
                           rows_GA=rows_GA,
                           rows_YM=rows_YM,
                           rows_ERP=rows_ERP,
                           site_id=site_id)

def generate_plot_image(df, kind, group=None, column=None, title=""):
    fig, ax = plt.subplots()
    try:
        if not df.empty:
            if group:
                df.groupby(group)[column].sum().plot(kind=kind, ax=ax)
            else:
                df[column].value_counts().plot(kind=kind, ax=ax)
        else:
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center')
    except Exception as e:
        ax.text(0.5, 0.5, f'–û—à–∏–±–∫–∞: {e}', ha='center')
    ax.set_title(title)
    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    img = base64.b64encode(buf.getvalue()).decode('utf-8')
    buf.close()
    plt.close()
    return img

@app.route('/dashboard', methods=['POST'])
def dashboard():
    db = get_db()
    dbase = FDataBase(db)

    site_id = int(request.form.get("site_id"))
    site_name = get_site_name(db, site_id)

    df_ga = pd.DataFrame([dict(row) for row in dbase.getGA(site_id)])
    df_ym = pd.DataFrame([dict(row) for row in dbase.getYM(site_id)])
    df_erp = pd.DataFrame([dict(row) for row in dbase.getERPProducts()])
    df_buyers = pd.DataFrame([dict(row) for row in dbase.getERPBuyers()])

    all_images = [
        generate_plot_image(df_ga, 'bar', None, 'location', "GA –ø–æ –ª–æ–∫–∞—Ü–∏—è–º"),
        generate_plot_image(df_ga, 'bar', None, 'channel', "GA –ø–æ –∫–∞–Ω–∞–ª–∞–º"),
        generate_plot_image(df_ym, 'bar', None, 'location', "YM –ø–æ –ª–æ–∫–∞—Ü–∏—è–º"),
        generate_plot_image(df_ym, 'bar', None, 'channel', "YM –ø–æ –∫–∞–Ω–∞–ª–∞–º"),
        generate_plot_image(df_erp, 'bar', 'product_id', 'amount_money', "ERP: —Å—É–º–º–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º"),
        generate_plot_image(df_erp, 'bar', None, 'category', "ERP: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"),
        generate_plot_image(df_erp, 'bar', None, 'product_name', "ERP: –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"),
        generate_plot_image(df_erp, 'bar', 'category', 'amount_money', "ERP: —Å—É–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"),
        generate_plot_image(df_buyers, 'bar', None, 'product_id', "–ü–æ–∫—É–ø–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
    ]

    return render_template("four.html", all_images=all_images, site_id=site_id, site_name=site_name)

@app.route('/summary', methods=["POST"])
def summary_table():
    db = get_db()
    dbase = FDataBase(db)

    # site_id –∏–∑ —Ñ–æ—Ä–º—ã
    site_id = request.form.get('site_id')

    # –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü
    df_buyers = pd.DataFrame([dict(row) for row in dbase.getERPBuyers()])
    df_products = pd.DataFrame([dict(row) for row in dbase.getERPProducts()])
    df_ga = pd.DataFrame([dict(row) for row in dbase.getGA()])
    df_ym = pd.DataFrame([dict(row) for row in dbase.getYM()])
    df_sites = pd.DataFrame([dict(row) for row in dbase.getSites()]) if hasattr(dbase, 'getSites') else pd.DataFrame()

    if df_buyers.empty or df_products.empty or not site_id:
        return render_template("five.html", summary=[], site_name="")

    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏
    df_buyers = df_buyers.rename(columns={'id': 'buyer_id'})
    df_buyers['product_id'] = df_buyers['product_id'].astype(int)
    df_products['product_id'] = df_products['product_id'].astype(int)
    df = df_buyers.merge(df_products, on='product_id', how='left')

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è GA/YM –ø–æ site_id
    df_ga = df_ga[df_ga['site_id'] == int(site_id)]
    df_ym = df_ym[df_ym['site_id'] == int(site_id)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ source
    df_ga['source'] = 'GA'
    df_ym['source'] = 'YM'

    # –æ—Ç–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    df_ga_part = df_ga[['buyer_id', 'location', 'channel', 'site_path', 'visit_date']]
    df_ym_part = df_ym[['buyer_id', 'location', 'channel', 'site_path', 'visit_date']]

    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–∑–∏—Ç—ã
    visits = pd.concat([df_ga_part, df_ym_part], ignore_index=True)

    # —Å–æ–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–∫—É–ø–∫–∞–º–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤–∏–∑–∏—Ç—ã
    summary = df.merge(visits, on='buyer_id', how='inner')

    # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    summary = summary.rename(columns={
        'buyer_name': '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
        'purchase_date': '–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏',
        'product_name': '–ü—Ä–æ–¥—É–∫—Ç',
        'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        'amount_money': '–°—É–º–º–∞',
        'location': '–õ–æ–∫–∞—Ü–∏—è',
        'channel': '–ö–∞–Ω–∞–ª',
        'site_path': '–ü—É—Ç—å –ø–æ —Å–∞–π—Ç—É',
        'visit_date': '–î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞'
    })

    columns = ['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', '–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏', '–ü—Ä–æ–¥—É–∫—Ç', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–°—É–º–º–∞',
               '–õ–æ–∫–∞—Ü–∏—è', '–ö–∞–Ω–∞–ª', '–ü—É—Ç—å –ø–æ —Å–∞–π—Ç—É', '–î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞']
    summary = summary[[col for col in columns if col in summary.columns]]

    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞
    site_name = ""
    if not df_sites.empty:
        row = df_sites[df_sites['id'] == int(site_id)]
        if not row.empty:
            site_name = row.iloc[0]['name']

    return render_template("five.html", summary=summary.to_dict(orient="records"), site_name=site_name)

@app.route('/rfc', methods=["GET"])
def rfc_form():
    db = get_db()
    dbase = FDataBase(db)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã function
    functions = dbase.getFunctions()

    return render_template("six.html", functions=functions)


@app.route('/submit_rfc', methods=["POST"])
def submit_rfc():
    functions = request.form.getlist("function[]")
    toggles = request.form.getlist("toggle[]")
    lifecycles = request.form.getlist("lifecycle[]")

    print("üì• –ü–æ–ª—É—á–µ–Ω RFC-–∑–∞–ø—Ä–æ—Å:")
    for f, t, l in zip(functions, toggles, lifecycles):
        print(f" - –ë–ª–æ–∫: {f}, –¢–æ–≥–ª: {t}, –ñ–¶: {l}")

    flash("RFC-–∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")
    return render_template("six.html", functions=get_db().cursor().execute("SELECT * FROM function").fetchall())

def getFunctions(self):
    try:
        self.__cur.execute("SELECT * FROM function")
        return self.__cur.fetchall()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:", e)
        return []

@app.route('/rfc/download', methods=["POST"])
def rfc_download():
    functions = request.form.getlist("function[]")
    toggles = request.form.getlist("toggle[]")
    lifecycles = request.form.getlist("lifecycle[]")

    lines = ["RFC-–¥–æ–∫—É–º–µ–Ω—Ç: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ–±-—Ä–µ—Å—É—Ä—Å–∞\n"]
    for i, (f, t, l) in enumerate(zip(functions, toggles, lifecycles), 1):
        lines.append(f"{i}. –§—É–Ω–∫—Ü–∏—è: {f}\n   –¢–æ–≥–ª: {t}\n   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {l}\n")

    content = "\n".join(lines)

    response = make_response(content)
    response.headers["Content-Disposition"] = "attachment; filename=rfc_report.txt"
    response.mimetype = "text/plain"
    return response



if __name__ == "__main__":
    app.run(debug=True)
